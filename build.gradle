apply plugin: 'java'

apply plugin: 'github-pages'
apply plugin: 'jacoco'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
       classpath 'org.ajoberstar:gradle-git:0.8.0'
    }
}

sourceCompatibility = 1.7
version = '0.2.0-SNAPSHOT'
group = 'se.fnord'


// Skip any version qualifier in the bundle version since maven and
// OSGi versions are not friends.
// Alternatively I guess we could use the date (as common in OSGI) for
// the bundle version when -SNAPSHOT is present, otherwise use 999999999999 since that will
// match higher than the generated date.
// See eg. http://www.infoq.com/news/2012/04/osgi-snapshot
ext.bundleVersion = version.replaceAll(~/-.*$/, "")
ext.bundleName = "${group}.${name}"
ext.bundleSymbolicName = 'KATYDID Asserts That Your Data Is Deluxe'

ext.sharedManifest = manifest {
    attributes(
        "Bundle-ManifestVersion": 2,
        "Bundle-Version": bundleVersion,
        "Bundle-Vendor": "Henrik Gustafsson <henrik.gustafsson@fnord.se>",
        "Bundle-SymbolicName": bundleSymbolicName,
        "Bundle-Name": bundleName,
    )
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

jar {
    manifest = project.manifest {
        from sharedManifest
        from project.manifest {
            attributes(
                "Export-Package": "se.fnord.katydid",
                "Require-Capability": "osgi.ee;filter:=\"(&(osgi.ee=JavaSE)(version>=1.7))\""
            )
        }
    }
    archiveName = "${bundleName}-${bundleVersion}.${extension}"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource

    manifest {
        from sharedManifest
        from project.manifest {
            attributes(
                "Eclipse-SourceBundle": "${bundleName};version=\"${bundleVersion}\";roots:=\".\"",
                "Bundle-SymbolicName": "${bundleSymbolicName} (Sources)",
                "Bundle-Name": "${bundleName}.sources",
            )
        }
    }
    archiveName = "${bundleName}-${version}-sources.${extension}"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    manifest {
        from sharedManifest
        from project.manifest {
            attributes(
                    "Bundle-SymbolicName": "${bundleSymbolicName} (Javadoc)",
                    "Bundle-Name": "${bundleName}.javadoc",
            )
        }
    }
    archiveName = "${bundleName}-${version}-javadoc.${extension}"
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

test {
    testLogging {
        events "failed"
        showStackTraces true
        exceptionFormat "full"
        showCauses true
        showStandardStreams true
    }
}

jacocoTestReport {
    dependsOn test
}

publishGhPages {
    dependsOn jacocoTestReport
    dependsOn javadoc
}

githubPages {
    repoUri = 'https://github.com/gsson/katydid.git'
    credentials {
        username = 'gsson'
        password = System.getenv('GH_TOKEN')
    }
    pages {
        from("$jacoco.reportsDir/test/html") {
            into('jacoco/')
        }
        from(javadoc.outputs.files) {
            into('javadoc/')
        }
    }
}
